<?php

/**
 * Autogenerated file for problem LetterCombinationsPhoneNumber
 */

namespace LeetCode\Problems\LetterCombinationsPhoneNumber;

class LetterCombinationsPhoneNumber
{
    protected $op = [];
    protected $letters = [
        2 => ['a','b','c'],
        3 => ['d','e','f'],
        4 => ['g','h','i'],
        5 => ['j','k','l'],
        6 => ['m','n','o'],
        7 => ['p','q','r','s'],
        8 => ['t','u','v'],
        9 => ['w','x','y','z']
    ];
    /**
     * @param String $digits
     * @return String[]
     */
    public function letterCombinations($digits)
    {
        if (strlen($digits) < 1) {
            return $this->op;
        }

        if (strlen($digits) === 1) {
            return $this->letters[$digits];
        } else {
            $this->letterCombinationRecursive(str_split($digits), '');
        }
        return $this->op;
    }

    public function letterCombinationRecursive($digits, $letter = '')
    {
        if (empty($digits)) {
            $this->op[] = $letter;
            return;
        }
        $key = array_shift($digits);
        if (!$key) {
            return;
        }
        foreach ($this->letters[$key] as $value) {
            $this->letterCombinationRecursive($digits, $letter . $value);
        }
    }
}
